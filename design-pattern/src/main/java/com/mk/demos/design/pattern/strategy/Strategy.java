package com.mk.demos.design.pattern.strategy;

/**
 * 策略抽象类
 *
 * 策略模式建议找出负责用许多不同方式完成特定任务的类， 然后将其中的算法抽取到一组被称为策略的独立类中。
 *
 * 名为上下文的原始类必须包含一个成员变量来存储对于每种策略的引用。
 *      上下文并不执行任务， 而是将工作委派给已连接的策略对象。
 *
 * 上下文不负责选择符合任务需要的算法——客户端会将所需策略传递给上下文。
 *      实际上，上下文并不十分了解策略， 它会通过同样的通用接口与所有策略进行交互，
 *      而该接口只需暴露一个方法来触发所选策略中封装的算法即可。
 *
 * 因此， 上下文可独立于具体策略。
 *
 * 这样你就可在不修改上下文代码或其他策略的情况下添加新算法或修改已有算法了。
 *
 * @author WangChen
 * Created on 2021/1/24 10:09
 * @since 1.0
 */
public interface Strategy {

    String s = "";// 接口中也可以定义变量，不过需要初始化
    void doOperation();
}
